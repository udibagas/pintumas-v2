// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts         Post[]
  announcements Announcement[]
  comments      Comment[]
  Media         Media[]
  departmentId  String?
  department    Department?    @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  appsId        String?

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  articles    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts         Post[]
  announcements Announcement[]

  @@map("categories")
}

model Post {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  summary      String?
  content      String
  imageUrl     String?
  status       Status    @default(DRAFT)
  featured     Boolean   @default(false)
  views        Int       @default(0)
  readTime     String?
  publishedAt  DateTime?
  departmentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId   String
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments   Comment[]
  tags       PostTag[]
  PostMedia  PostMedia[]
  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  @@map("posts")
}

model Announcement {
  id               String           @id @default(cuid())
  title            String
  summary          String?
  content          String
  announcementType AnnouncementType @default(INFO)
  priority         Int              @default(1) // 1=low, 2=medium, 3=high, 4=urgent
  status           Status           @default(PUBLISHED)
  startDate        DateTime? // When to start showing
  endDate          DateTime? // When to stop showing
  linkUrl          String? // Optional external link
  linkText         String? // Text for the link
  views            Int              @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId   String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String? // Optional category for announcements
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("announcements")
}

model Media {
  id        String      @id @default(cuid())
  url       String // Cloud URL (S3, Cloudinary, etc.)
  filename  String // Original filename
  caption   String? // Optional caption for media
  type      MediaType
  width     Int? // For images/videos
  height    Int? // For images/videos
  duration  Int? // For videos (in seconds)
  format    String? // e.g., "jpg", "mp4", "pdf"
  size      Int? // File size in bytes
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime    @default(now())
  PostMedia PostMedia[]
}

model PostMedia {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   String
  createdAt DateTime @default(now())

  @@unique([postId, mediaId]) // Prevent multiple attachments of same media to a post
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  imageUrl  String? // URL for department logo
  link      String? // External link
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts Post[]
  users User[]

  @@map("departments")
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT // PDFs, Word files
  AUDIO
}

enum AnnouncementType {
  INFO // General information
  BREAKING // Breaking news
  ALERT // Important alerts
  EVENT // Event announcements
  MAINTENANCE // System maintenance
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., 'contact_info', 'social_media'
  value     Json // Store contact info and social media as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Apps {
  id        String   @id @default(cuid())
  name      String   @unique
  iconUrl   String? // URL for app icon
  link      String? // External link to app
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("apps")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}
